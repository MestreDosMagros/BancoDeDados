CREATE DATABASE ESCOLA;

CREATE TABLE PROFESSORES (
    ID INT IDENTITY(1, 1) PRIMARY KEY,
    NOME VARCHAR(65) NOT NULL,
    EMAIL VARCHAR(80) NOT NULL
);

CREATE TABLE VALOR_HORA_PROFESSORES (
    ID INT IDENTITY PRIMARY KEY,
    ID_PROFESSOR INT NOT NULL,
    VALOR_HORA INT NOT NULL,
    CONSTRAINT FK_PROFESSOR_HORA FOREIGN KEY(ID_PROFESSOR) REFERENCES PROFESSORES(ID)
);

CREATE TABLE ALUNOS (
    ID INT IDENTITY PRIMARY KEY,
    CPF VARCHAR(11) NOT NULL,
    NOME VARCHAR(65) NOT NULL,
    EMAIL VARCHAR(80) NOT NULL,
    DDD VARCHAR(3),
    TELEFONE VARCHAR(9),
    DDD_CONTATO VARCHAR(3) NOT NULL,
    TELEFONE_CONTATO VARCHAR(9) NOT NULL,
    DATA_NASCIMENTO DATE NOT NULL,
    UNIQUE(CPF)
);

CREATE TABLE CURSOS (
    ID INT IDENTITY PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    REQUISITO VARCHAR(255),
    CARGA_HORARIA SMALLINT NOT NULL
);

CREATE TABLE PRECOS (
    ID INT IDENTITY PRIMARY KEY,
    PRECO DECIMAL(10, 2) NOT NULL,
    DATA_INICIO DATE NOT NULL,
    DATA_FINAL DATE NOT NULL
);

CREATE TABLE PRECO_CURSOS (
    ID INT IDENTITY PRIMARY KEY,
    ID_PRECO INT NOT NULL,
    ID_CURSO INT NOT NULL,
    CONSTRAINT FK_PRECO FOREIGN KEY (ID_PRECO) REFERENCES PRECOS(ID),
    CONSTRAINT FK_CURSO FOREIGN KEY (ID_CURSO) REFERENCES CURSOS(ID)
);

CREATE TABLE TURMAS (
    ID INT PRIMARY KEY IDENTITY,
    ID_CURSO INT NOT NULL,
    DATA_INICIO DATE NOT NULL,
    DATA_FINAL DATE NOT NULL,
    CONSTRAINT FK_CURSOS FOREIGN KEY (ID_CURSO) REFERENCES CURSOS(ID)
);

CREATE TABLE MATERIAS (
    ID INT PRIMARY KEY IDENTITY,
    NOME VARCHAR(30) NOT NULL,
    ID_PROFESSOR INT NOT NULL,
    CONSTRAINT FK_PROFESSOR FOREIGN KEY (ID_PROFESSOR) REFERENCES PROFESSORES(ID)
);

CREATE TABLE MATERIA_TURMA (
    ID INT PRIMARY KEY IDENTITY,
    ID_TURMA INT NOT NULL,
    ID_MATERIA INT NOT NULL,
    CONSTRAINT FK_TURMA_MATERIA FOREIGN KEY (ID_TURMA) REFERENCES TURMAS(ID),
    CONSTRAINT FK_MATERIA_TURMA FOREIGN KEY (ID_MATERIA) REFERENCES MATERIAS(ID)
);

CREATE TABLE MATRICULA (
    ID INT PRIMARY KEY IDENTITY,
    ID_TURMA INT NOT NULL,
    ID_ALUNO INT NOT NULL,
    DATA_MATRICULA DATE NOT NULL,
    CONSTRAINT FK_ALUNO_MATRICULA FOREIGN KEY (ID_ALUNO) REFERENCES ALUNOS(ID),
    CONSTRAINT FK_TURMA_MATRICULA FOREIGN KEY (ID_TURMA) REFERENCES TURMAS(ID)
);

/*
 1 - CRIAR ENTIDADES DE ALUNOS, PROFESSORES E CURSOS 
 
 2 - INSERIR O VALOR HORA DOS PROFESSORES INSERIDOS
 
 4 - CRIAR ENTIDADES DE TABELAS DE PRECO E RELACIONAR COM OS CURSOS CADASTRADOS
 
 5 - CRIAR TURMAS E RELACIONAR COM ALGUM CURSO CADASTRADO
 
 6 - CRIAR MATERIAS E RELACIONAR COM O PROFESSORES E AS TURMAS QUE VAO CURSAR ESSA MATERIA
 
 7 - CRIAR UMA MATRICULA E VINCULE UM ALUNO A UMA TURMA
 */
/*
 INSERT INTO
 ALUNOS (
 CPF,
 NOME,
 EMAIL,
 DDD,
 TELEFONE,
 DDD_CONTATO,
 TELEFONE_CONTATO,
 DATA_NASCIMENTO
 )
 VALUES
 (
 '08173637008',
 'DANIEL VIECK',
 'DANIEL.VIECK@OUTLOOK.COM',
 '047',
 '988759441',
 '047',
 '988759441',
 '1998-05-27'
 ),
 (
 '37026724002',
 'RODRIGO MONDINI',
 'TESTE@OUTLOOK.COM',
 '047',
 '988793741',
 '047',
 '988757351',
 '1968-10-20'
 ),
 (
 '82683991045',
 'GUSTAVO OLIVEIRA',
 'TESTE2@OUTLOOK.COM',
 '047',
 '989735860',
 '047',
 '989735860',
 '1992-03-04'
 );
 
 INSERT INTO
 PROFESSORES(NOME, EMAIL)
 VALUES
 ('PROFESSOR1', 'PROFESSOR1@TESTE.COM'),
 ('PROFESSOR2', 'PROFESSOR2@TESTE.COM'),
 ('PROFESSOR3', 'PROFESSOR3@TESTE.COM');
 
 
 INSERT INTO
 CURSOS (NOME, REQUISITO, CARGA_HORARIA)
 VALUES
 (
 'SISTEMAS DA INFORMAÇÃO',
 'LÓGICA DE PROGRAMAÇÃO',
 140
 ),
 (
 'CIÊNCIAS DA COMPUTAÇÃO',
 'LÓGICA DE PROGRAMAÇÃO',
 180
 ),
 ('WEB DESIGN', 'PHOTOSHOP', 100);
 
 INSERT INTO
 PRECOS (PRECO, DATA_INICIO, DATA_FINAL)
 VALUES
 (15000, '0001-01-01', '3100-01-01'),
 (35000, '0001-01-01', '3100-01-01')
 
 INSERT INTO
 PRECO_CURSOS(ID_PRECO, ID_CURSO)
 VALUES
 (2, 1),
 (2, 2),
 (3, 3)
 
 INSERT INTO
 TURMAS (ID_CURSO, DATA_INICIO, DATA_FINAL)
 VALUES
 (1, '2020-02-15', '2024-02-15'),
 (2, '2020-02-15', '2024-02-15'),
 (3, '2020-02-15', '2024-02-15')
 
 INSERT INTO
 MATERIAS (NOME, ID_PROFESSOR)
 VALUES
 ('PROGRAMAÇÃO BÁSICA', 1),
 ('PROGRAMAÇÃO AVANÇADA', 2),
 ('EDIÇÃO DE IMAGENS', 3)
 
 INSERT INTO
 MATERIA_TURMA (ID_TURMA, ID_MATERIA)
 VALUES
 (3, 3),
 (2, 2),
 (1, 1)
 
 INSERT INTO
 MATRICULA(ID_TURMA, ID_ALUNO, DATA_MATRICULA)
 VALUES
 (1, 2, GETDATE()),
 (3, 1, GETDATE()),
 (3, 3, GETDATE())
 
 INSERT INTO
 VALOR_HORA_PROFESSORES(ID_PROFESSOR, VALOR_HORA)
 VALUES
 (1, 50),
 (2, 46),
 (3, 80)
 
 SELECT
 *
 FROM MATRICULA MATRICULA
 JOIN TURMAS TURMA 
 ON MATRICULA.ID_TURMA = TURMA.ID
 JOIN ALUNOS ALUNO
 ON MATRICULA.ID_ALUNO = ALUNO.ID
 JOIN CURSOS CURSO
 ON CURSO.ID = TURMA.ID_CURSO
 JOIN MATERIA_TURMA MATERIAS 
 ON MATERIAS.ID_TURMA = TURMA.ID
 JOIN MATERIAS MATERIA
 ON MATERIA.ID = MATERIAS.ID
 JOIN PRECO_CURSOS PRECOS 
 ON PRECOS.ID_CURSO = CURSO.ID
 JOIN PRECOS PRECO
 ON PRECO.ID= PRECOS.ID_PRECO
 JOIN PROFESSORES PROFESSOR
 ON PROFESSOR.ID = MATERIA.ID_PROFESSOR
 JOIN VALOR_HORA_PROFESSORES VALOR_PROFESSOR
 ON VALOR_PROFESSOR.ID_PROFESSOR = PROFESSOR.ID
 */
1 - BUSCAR TODOS OS NOMES DOS ALUNOS QUE ESTÃO MATRICULADOS EM DETERMINADO CURSO 2 - CRIE UMA VIEW PARA BUSCAR TODOS OS NOMES DOS ALUNOS QUE ESTÃO MATRICULADOS EM QUALQUER CURSO E A DATA DE MATRICULA FOR MAIOR QUE 01 / 01 / 2020 3 - CRIAR UMA PROCEDURE QUE CADASTRE UM ALUNO EM UMA DETERMINADA TURMA E RETORNE O NOME DAS MATERIAS,
NOME DOS PROFESSORES,
EMAIL DOS PROFESSORES,
PRECO TOTAL DO CURSO,
PRECO TOTAL DO CURSO DIVIDIDO EM 4 ANOS,
CARGA HORARIA DO CURSO E DATA FINAL DA TURMA
/*
 SELECT
 curso.id id_curso,
 curso.nome,
 ALUNO.ID,
 aluno.nome
 FROM MATRICULA MATRICULA
 JOIN TURMAS TURMA 
 ON MATRICULA.ID_TURMA = TURMA.ID
 JOIN ALUNOS ALUNO
 ON MATRICULA.ID_ALUNO = ALUNO.ID
 JOIN CURSOS CURSO
 ON CURSO.ID = TURMA.ID_CURSO
 where curso.nome = 'SISTEMAS DA INFORMAÇÃO'
 
 CREATE PROC MATRICULA_ALUNO @ID_TURMA INT, @ID_ALUNO INT
 AS 
 BEGIN
 INSERT INTO MATRICULA(ID_TURMA, ID_ALUNO,     DATA_MATRICULA) VALUES (@ID_TURMA, @ID_ALUNO, GETDATE())
 END 
 
 CREATE FUNCTION ARREDONDAR(@NUMERO DECIMAL(10, 2))
 RETURNS DECIMAL(10, 2)
 BEGIN
 RETURN CAST(@NUMERO AS DECIMAL(10, 2))
 END 
 
 CREATE FUNCTION CALCULA_PARCELAS(@PRECO DECIMAL(10, 2), @NUMERO_PARCELAS INT)
 RETURNS DECIMAL(10, 2)
 BEGIN
 RETURN CAST(@PRECO/@NUMERO_PARCELAS AS DECIMAL(10,2))
 END
 
 SELECT PRECO, DBO.CALCULA_PARCELAS(PRECO, 48) VALOR_PARCELA FROM PRECOS
 
 */
-- 1 - CRIAR UMA BASE DE DADOS DE UMA CONCECIONARIA DE CARROS QUE TENHA OS CARROS A VENDA, E TAMBEM OPCIONAIS. 
--     CADA OPCIONAL TEM SEU PRECO PROPRIO, POREM NAO SAO TODOS OS CARROS QUE ACEITAM TODOS OS OPCIONAIS.
-- 2 - CRIE UMA VIEW QUE AO PASSAR O MODELO DO CARRO E OS OPCIONAIS RETORNE O PRECO TOTAL DO CARRO 
--     COM E SEM OPCIONAIS E O PRECO DE CADA OPCIONAL ESCOLHIDO, CASO FOR PASSADO ALGUM OPCIONAL QUE NAO PERMITIDO
--     RETORNAR 'OPCIONAL NAO PERMITIDO'.
--     CONCECIONARIA
--     >CARROS
--     >OPCIONAIS
--     >CARRO-OPCIONAIS
-- 3 - CRIAR UMA FUNCAO PARA VERIFICAR SE DETERMINADO ADICIONAL PODE SER ESCOLHIDO PARA DETERMINADOCARRO
--     EX: VERFICA_OPCIONAL('FUSCA', 'TETO-SOLAR')
CREATE TABLE CARROS (
    ID INT NOT NULL PRIMARY KEY IDENTITY,
    NOME VARCHAR(30),
    PRECO_BASE DECIMAL(10, 2)
);

CREATE TABLE OPCIONAIS (
    ID INT NOT NULL PRIMARY KEY IDENTITY,
    NOME VARCHAR(30),
    PRECO DECIMAL(10, 2)
);

CREATE TABLE CARRO_OPCIONAIS (
    ID INT NOT NULL PRIMARY KEY IDENTITY,
    ID_CARRO INT NOT NULL,
    ID_OPCIONAL INT NOT NULL,
    CONSTRAINT FK_CARRO FOREIGN KEY (ID_CARRO) REFERENCES CARROS(ID),
    CONSTRAINT FK_OPCIONAL FOREIGN KEY (ID_OPCIONAL) REFERENCES OPCIONAIS(ID)
);

INSERT INTO
    CARROS(NOME, PRECO_BASE)
VALUES
    ('FUSCA', 700000);

INSERT INTO
    OPCIONAIS(NOME, PRECO)
VALUES
    ('BANCO DE COURO', 7000);

INSERT INTO
    CARRO_OPCIONAIS(ID_CARRO, ID_OPCIONAL)
VALUES
    (1, 2);

SELECT
    CARRO.NOME,
    OPCIONAL.NOME,
    OPCIONAL.PRECO,
    (
        SELECT
            SUM(OPCIONAL.PRECO) + CARRO.PRECO_BASE PRECO_TOTAL
        FROM
            CARROS CARRO
            JOIN CARRO_OPCIONAIS OPCIONAIS ON OPCIONAIS.ID_CARRO = CARRO.ID
            JOIN OPCIONAIS OPCIONAL ON OPCIONAL.ID = OPCIONAIS.ID_OPCIONAL
        GROUP BY
            CARRO.NOME,
            CARRO.PRECO_BASE
    ) AS PRECO_TOTAL
FROM
    CARROS CARRO
    JOIN CARRO_OPCIONAIS OPCIONAIS ON OPCIONAIS.ID_CARRO = CARRO.ID
    JOIN OPCIONAIS OPCIONAL ON OPCIONAL.ID = OPCIONAIS.ID_OPCIONAL
GROUP BY
    CARRO.NOME,
    OPCIONAL.NOME,
    OPCIONAL.PRECO;